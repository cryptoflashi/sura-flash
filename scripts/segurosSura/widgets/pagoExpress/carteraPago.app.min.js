appPagoExpress.controller("portfolioController", function($scope, $filter, pagoExpressService) {

    $scope.$on('$locationChangeStart', function(event, next, current) {
        $scope.changeProgress(1);
        event.preventDefault();
    });

    gtag(
        'config',
        'UA-92878313-1', {
            page_tittle: 'cartera',
            page_location: window.location.href.toLowerCase() + '#cartera',
            page_path: window.location.pathname.toLowerCase() + '#cartera'
        }
    );

    ga('set', 'userId');

    if (!nullObjectValidate(pagoExpressService.information)) {
        $scope.information = pagoExpressService.information;
    } else {
        $scope.changeProgress(1);
    }

    var portfolioFullData = [];
    var tabSelected = 0;
    $scope.portfolio = {};
    $scope.ltPortfolios = [];
    $scope.invalidPartial = false;
    $scope.srcImages = srcImages;

    $scope.payment = {
        headRequest: {},
        redirectRequest: {
            userAgent: navigator.userAgent
        }
    };


    var cleanTabs = function(tab) {
        $scope.invalidPartial = false;
        $scope.ltPortfolios.forEach(
            function(p) {
                p.active = false;
                p.headCtrl.isCheck = false;
            }
        );

        if ($scope.portfolio.fullData.length > 0) {
            $scope.portfolio.active = false;
            $scope.portfolio.headCtrl.isCheck = false;
        }

        if (tab == -1) {
            $scope.portfolio.active = true;
        } else {
            $scope.ltPortfolios[tab].active = true;
        }

        tabSelected = tab;
    };


    $scope.ltInsurances = [{
            code: "1000",
            insurance: "Seguros Generales"
        },
        {
            code: "2000",
            insurance: "Seguros de Vida"
        },
        {
            code: "2100",
            insurance: "EPS"
        },
        {
            code: "5000",
            insurance: "Operaciones"
        },
        {
            code: "2700",
            insurance: "Consultoría",
        }
    ];

    var changePage = function(portfolio) {
        portfolio.data = paginate(portfolio.fullData, pageSize, portfolio.pagination.page);
    };


    var sumTotal = function(amount, data) {
        amount.total = 0.0;

        data.forEach(
            function(i) {
                amount.total += i.selected ? (i.amount.total ? i.amount.total : 0) : 0;
            }
        );
    };


    var validatePaymentMethods = function(row, info, showAlert) {
        info.commons.methods = [];

        var ltSelected = info.fullData.filter(
            function(i) {
                return i.selected;
            }
        );

        if (ltSelected.length > 0) {
            info.commons.methods = ltSelected[0].listPaymentMethod;

            for (var c in ltSelected) {
                // easy way to get the intersection between two arrays but IE dislike
                // info.commons.methods = info.commons.methods.filter( a => true === ltSelected[c].listPaymentMethod.some( b => a.code === b.code ) );
                info.commons.methods = info.commons.methods.filter(
                    function(a) {
                        return ltSelected[c].listPaymentMethod.some(
                            function(b) {
                                return a.code === b.code;
                            }
                        );
                    }
                );

                if (info.commons.methods.length == 0) {
                    row.selected = false;
                    validatePaymentMethods(row, info);
                    if (showAlert) {
                        var ul = document.createElement("ul");
                        ul.className = "payments-table";
                        info.commons.methods.forEach(
                            function(i) {
                                var li = document.createElement("li");
                                var img = document.createElement("img");
                                img.src = srcImages[i.code];
                                li.appendChild(img);
                                ul.appendChild(li);
                            }
                        );

                        swal({
                            title: "Medios de Pago",
                            text: 'El recibo debe tener uno de estos medios de pago',
                            content: ul,
                            icon: "warning",
                            buttons: {
                                accept: {
                                    text: "Aceptar"
                                }
                            }
                        });
                    }
                    return;
                }
            }
        }
    };


    var loadDataValState = function(row) {
        row.tooltipConf.messages = [];
        if (!nullObjectValidate(row.lockDescription) && !nullObjectValidate(row.lockDescription.trim())) {
            row.tooltipConf.messages.push(row.lockDescription);
            row.stClass += ' disabled ';
        }
    };


    var loadDataValFlow = function(info, infoToVal) {
        if (!nullObjectValidate(infoToVal)) {
            if (info.financed) {
                info.stClass += (info.reference1 != infoToVal.reference1) ? ' la-separadora' : ' la-normal'
            }
            info.stClass += (info.cdFlujo != infoToVal.cdFlujo) ? ' grupo-flujo' : ''
        }
    };


    var loadDataValidations = function(data) {
        data.forEach(
            function(i, index) {
                i.tooltipConf = {
                    icon: "fa-info-circle",
                    template: "block",
                    tittle: "Estado",
                    messages: [],
                    placement: "top"
                };
                i.selected = false;
                i.stClass = '';
                i.baselineDate = i.baselineDate;
                loadDataValState(i);
                loadDataValFlow(i, (index < data.length - 1 ? data[index + 1] : null));
            }
        );
    };


    var validateState = function(row) {
        if (!nullObjectValidate(row.lockDescription) && !nullObjectValidate(row.lockDescription.trim())) {
            row.selected = false;
        }
    };


    var validateFlow = function(row, data, showAlert) {
        if (!row.selected) {
            return;
        }
        var selected = data.filter(
            function(i) {
                return i.selected && (row.cdFlujo != i.cdFlujo);
            }
        );
        if (selected.length > 0) {
            row.selected = false;
            if (showAlert) {
                swal({
                    title: "Tipo Recibo",
                    text: 'Debes realizar el pago de estos recibos de forma independiente',
                    icon: "warning",
                    buttons: {
                        accept: {
                            text: "Aceptar"
                        }
                    }
                });
            }
        }
    };


    var validateNumFee = function(row, data, showAlert) {

        /**VALIDAR RECIBOS PARA SACARLOS DE LA VALIDACIÖN***/
        if (!nullObjectValidate(row.noValidate) && row.noValidate.toLowerCase() == "x") {
            return;
        }
        /**VALIDAR RECIBOS PARA SACARLOS DE LA VALIDACIÖN***/
        if (row.receipt == "TOTAL") {
            return;
        }
        var ltFees = data.filter(
            function(i) {
                var validation = i.reference1 == row.reference1;
                validation = validation && !i.selected;
                validation = validation && i.receipt != "TOTAL";
                validation = validation && !(!nullObjectValidate(i.noValidate) && i.noValidate.toLowerCase() == "x");
                validation = validation && row.baselineDate > i.baselineDate;
                return validation;
            }
        );
        if (ltFees.length > 0) {
            row.selected = false;
            if (showAlert) {
                var fees = "";
                ltFees.forEach(
                    function(i) {
                        fees += (row.financed ? i.baselineDate : i.reference) + ", ";
                    }
                );
                fees = fees.substring(0, fees.length - 2);

                var span = document.createElement("span");
                span.appendChild(document.createTextNode(fees));

                swal({
                    title: "Recibos pendientes",
                    text: "Para pagar este recibo debes pagar primero las cuotas pendientes" +
                        (row.financed ? " del prestamo " + row.reference3 : "") + ".",
                    content: span,
                    icon: "warning",
                    buttons: {
                        accept: {
                            text: "Aceptar"
                        }
                    }
                });
            }
        }
    };


    var validateUnCheckNumFee = function(row, data) {
        data.forEach(
            function(i) {
                var validation = i.reference1 == row.reference1;
                validation = validation && i.selected;
                validation = validation && row.baselineDate < i.baselineDate;

                if (validation) {
                    i.selected = false;
                }
            }
        );
    };


    var validateNumPartialFee = function(row, data, showAlert) {
        var fee = data.find(
            function(i) {
                var validation = i.reference1 == row.reference1;
                validation = validation && i.selected;
                validation = validation && i.receipt == "TOTAL";
                return validation;
            }
        );
        if (!nullObjectValidate(fee) && fee.reference != row.reference) {
            row.selected = false;
            if (showAlert) {
                swal({
                    title: "Pago Total",
                    text: "Ya seleccionaste el recibo para generar el pago total de la poliza.",
                    icon: "warning",
                    buttons: {
                        accept: {
                            text: "Aceptar"
                        }
                    }
                });
            }
        }

        if (row.receipt == "TOTAL") {
            data.forEach(
                function(i) {
                    var validation = i.reference1 == row.reference1;
                    validation = validation && i.reference != row.reference;
                    validation = validation && i.selected;
                    if (validation) {
                        i.selected = false;
                    }
                }
            );
        }
    };


    var isKeepInvalid = function(info) {
        var keepInvalid = info.fullData.find(
            function(i) {
                return i.invalid && i.selected
            }
        );

        $scope.invalidPartial = !nullObjectValidate(keepInvalid);
    }


    var validatePartial = function(row, info) {
        if (row.amount.total == 0 || nullObjectValidate(row.amount.total)) {
            $scope.invalidPartial = row.invalid = true;
        } else {
            row.invalid = false;
            isKeepInvalid(info);
        }

        sumTotal(info.amount, info.fullData);
    };


    var validatePartialMax = function(row, info) {
        validatePartial(row, info);
        if (row.invalid) {
            document.getElementById(row.reference1 + row.reference).focus();
            return;
        }
        if (row.amount.totalVal != row.amount.total) {
            var prcnt = parseInt(row.prcntPartialPayment);
            if (prcnt != NaN && prcnt > 0) {
                row.invalid = parseInt(row.amount.total) > parseInt(row.amount.totalVal) * prcnt / 100;
                if (row.invalid) {
                    $scope.invalidPartial = true;
                    swal({
                            title: "Máximo permitido",
                            text: "solo puedes pagar hasta un valor de " + $filter('currency')(parseInt(parseInt(row.amount.totalVal) * prcnt / 100)) + " o el total de " + $filter('currency')(parseInt(row.amount.totalVal)),
                            icon: "info",
                            buttons: {
                                accept: {
                                    text: "Aceptar"
                                }
                            }
                        })
                        .then(
                            function() {
                                row.amount.total = 0;
                                sumTotal(info.amount, info.fullData);
                                $scope.$apply();
                                document.getElementById(row.reference).focus();
                            }
                        );
                }
            }
        }
    };


    var validateTotal = function(row, info) {
        info.headCtrl.isCheck = false;
        if (row.selected) {
            row.amount.total = row.amount.totalVal;
            row.invalid = false;
            validateNumFee(row, info.fullData, true);
            validateNumPartialFee(row, info.fullData, true);
            validateFlow(row, info.fullData, true);
            validatePaymentMethods(row, info, true);
        } else {
            validateUnCheckNumFee(row, info.fullData);
        }
        if (!row.financed) {
            validatePaymentMethods(row, info, true);
        }
        isKeepInvalid(info);
        sumTotal(info.amount, info.fullData);
    };

    var selectAll = function(info) {
        info.fullData.forEach(
            function(i) {
                i.selected = info.headCtrl.isCheck;
                validateState(i);
                validateNumFee(i, info.fullData);
                validateNumPartialFee(i, info.fullData);
                validateFlow(i, info.fullData);

                if (!i.financed) {
                    validatePaymentMethods(i, info);
                }
            }
        );
        sumTotal(info.amount, info.fullData);
    };


    $scope.gridConfigFinanced = {
        body: {
            block: {
                val: 'lockDescription'
            }
        },
        header: {
            col_1: {
                type: 'tooltip',
                conf: {
                    icon: "fa-info-circle",
                    template: "info",
                    tittle: "Póliza",
                    message: 'Para consultar tu número de póliza revisa la carátula de tu seguro. El número de tu seguro de salud lo encuentras en el carné.',
                    placement: "top"
                }
            }
        },
        footer: {
            lPad: 6,
            stClass: "text-right"
        },
        columns: [{
                colResponsive: 0,
                columntype: 'input',
                block: 'lockDescription',
                fmt: {
                    type: 'check',
                    val: 'selected',
                    fn: validateTotal
                }
            },
            {
                colResponsive: 1,
                label: 'Póliza',
                fmt: {
                    val: 'reference1'
                }
            },
            {
                colResponsive: 3,
                label: 'N° Prestamo',
                fmt: {
                    val: 'receipt'
                }
            },
            {
                label: 'Cuota',
                fmt: {
                    type: 'text',
                    txt: '{0} de {1}',
                    vals: ['nmcuota', 'nmplazo']
                }
            },
            {
                colResponsive: 5,
                label: 'Fecha límite de pago',
                fmt: {
                    val: 'baselineDate'
                }
            },
            {
                label: 'Descripción',
                fmt: {
                    val: 'baselineDescription'
                }
            },
            {
                colResponsive: 2,
                label: 'Saldo del Recibo',
                stClass: 'text-right',
                fmt: {
                    type: 'currency',
                    symbol: '$',
                    fractionSize: 0,
                    val: 'amount.totalVal'
                }
            },
            {
                colResponsive: 4,
                columntype: 'input',
                label: 'Valor a Pagar',
                stClass: 'text-center',
                fmt: {
                    type: 'text',
                    symbol: '$',
                    fractionSize: 0,
                    model: 'amount.total',
                    isEdit: "partialPayment",
                    id: 'reference',
                    class: 'editValue',
                    maxlength: 14,
                    isCurrency: true,
                    onKeyUp: validatePartial,
                    onBlur: validatePartialMax
                }
            }
        ]
    };


    $scope.gridConfig = {
        body: {
            block: {
                val: 'lockDescription',
                trClass: 'disabled'
            }
        },
        header: {
            col_1: {
                type: 'tooltip',
                conf: {
                    icon: "fa-info-circle",
                    template: "info",
                    tittle: "Póliza",
                    message: 'Para consultar tu número de póliza revisa la carátula de tu seguro. El número de tu seguro de salud lo encuentras en el carné.',
                    placement: "top"
                }
            }
        },
        footer: {
            lPad: 5,
            stClass: "text-right"
        },
        columns: [{
                colResponsive: 0,
                columntype: 'input',
                block: 'lockDescription',
                fmt: {
                    type: 'check',
                    val: 'selected',
                    fn: validateTotal
                }
            },
            {
                colResponsive: 1,
                label: 'Póliza',
                fmt: {
                    val: 'reference1'
                }
            },
            {
                colResponsive: 3,
                label: 'N° Recibo',
                fmt: {
                    val: 'reference'
                }
            },
            {
                colResponsive: 5,
                label: 'Fecha límite de pago',
                fmt: {
                    val: 'baselineDate'
                }
            },
            {
                label: 'Descripción',
                fmt: {
                    val: 'baselineDescription'
                }
            },
            {
                colResponsive: 2,
                label: 'Saldo del Recibo',
                stClass: 'text-right',
                fmt: {
                    type: 'currency',
                    symbol: '$',
                    fractionSize: 0,
                    val: 'amount.totalVal'
                }
            },
            {
                colResponsive: 4,
                columntype: 'input',
                label: 'Valor a Pagar',
                stClass: 'text-center',
                fmt: {
                    type: 'text',
                    symbol: '$',
                    fractionSize: 0,
                    model: 'amount.total',
                    isEdit: "partialPayment",
                    id: 'reference',
                    class: 'editValue',
                    maxlength: 14,
                    isCurrency: true,
                    onKeyUp: validatePartial,
                    onBlur: validatePartialMax
                }
            }
        ]
    };


    $scope.setInformation = function() {
        $scope.ltPortfolios = [];
        $scope.portfolio = {
            imgs: srcImages,
            amount: {
                snTotal: true,
                dsTotal: "Total a pagar:",
                total: 0.0
            },
            headCtrl: {
                isCheck: false,
                fn: selectAll
            },
            commons: {
                methods: []
            },
            pagination: {
                page: 1,
                numRows: pageSize,
                maxSize: 5,
                fn: changePage,
                first: "<<",
                previous: "<",
                next: ">",
                last: ">>"
            },
            fullData: []
        };

        if (!nullObjectValidate($scope.information.customer.listAccountsReceivable)) {
            var sortPortfolio = function() {
                return function(a, b) {
                    if ((a.cdFlujo + '-' + a.reference1 + '-' + a.baselineDate) > (b.cdFlujo + '-' + b.reference1 + '-' + b.baselineDate))
                        return 1;

                    if ((a.cdFlujo + '-' + a.reference1 + '-' + a.baselineDate) < (b.cdFlujo + '-' + b.reference1 + '-' + b.baselineDate))
                        return -1;

                    return 0;
                }
            };

            portfolioFullData = $scope.information.customer.listAccountsReceivable.filter(
                function(i) {
                    try {
                        return i.financed && i.amount.total > 0;
                    } catch (ex) {
                        return false;
                    }
                }
            ).sort(sortPortfolio());

            if (portfolioFullData.length > 0) {
                //$scope.portfolio.commons.methods = portfolioFullData[0].listPaymentMethod;
                $scope.portfolio.fullData = portfolioFullData;
                $scope.portfolio.pagination.total = portfolioFullData.length;

                loadDataValidations($scope.portfolio.fullData);

                if (portfolioFullData.length <= pageSize) {
                    delete $scope.portfolio.pagination;
                    $scope.portfolio.data = portfolioFullData;
                } else {
                    changePage($scope.portfolio);
                }
            }

            for (var ins in $scope.ltInsurances) {
                var portfolioTemp = $scope.information.customer.listAccountsReceivable.filter(
                    function(i) {
                        return i.companyCode == $scope.ltInsurances[ins].code && !i.financed && i.amount.total > 0;
                    }
                ).sort(sortPortfolio());

                if (portfolioTemp.length > 0) {
                    $scope.ltPortfolios.push({
                        tab: $scope.ltInsurances[ins].insurance,
                        active: false,
                        imgs: srcImages,
                        amount: {
                            snTotal: true,
                            dsTotal: "Total a pagar:",
                            total: 0.0
                        },
                        headCtrl: {
                            isCheck: false,
                            fn: selectAll
                        },
                        commons: {
                            methods: []
                        },
                        pagination: {
                            page: 1,
                            numRows: pageSize,
                            maxSize: 5,
                            fn: changePage,
                            first: "<<",
                            previous: "<",
                            next: ">",
                            last: ">>",
                            total: portfolioTemp.length
                        },
                        fullData: portfolioTemp,
                        data: portfolioTemp
                    });

                    if (portfolioTemp.length <= pageSize) {
                        delete $scope.ltPortfolios[$scope.ltPortfolios.length - 1].pagination;
                    } else {
                        changePage($scope.ltPortfolios[$scope.ltPortfolios.length - 1]);
                    }

                    loadDataValidations($scope.ltPortfolios[$scope.ltPortfolios.length - 1].fullData);
                }
            }

            if ($scope.portfolio.fullData.length > 0) {
                $scope.portfolio.active = true;
                tabSelected = -1;
            } else {
                $scope.ltPortfolios[0].active = true;
            }

        }

        $scope.showLoader(false);
    };


    $scope.pay = function(info) {
        var data = info.fullData;
        var amount = info.amount;
        var common = info.commons.methods;
        var company = "";
        var description = "";

        if (data[0].financed) {
            company = "1800";
            description = "Pago Polizas Financiadas";
        } else {
            company = data[0].companyCode;
            // easy way to find an item inside an array but IE dislike
            // description = "Pago " + $scope.ltInsurances.find(x => x.code === company).insurance;
            description = "Pago " + $scope.ltInsurances.filter(function(x) { return x.code == company })[0].insurance;
        }


        $scope.payment.redirectRequest.buyer = {
            document: $scope.information.customer.document,
            documentType: $scope.information.customer.documentType,
            name: $scope.information.customer.name,
            surname: $scope.information.customer.lastName,
            mobile: $scope.information.customer.phone,
            email: $scope.information.customer.email
        };

        $scope.payment.headRequest.sociedad = company;
        $scope.payment.detailPayment = [];

        $scope.payment.redirectRequest.payment = {
            description: description,
            amount: amount
        };

        var ltPays = data.filter(
            function(pay) {
                return pay.selected
            }
        );

        for (i in ltPays) {
            $scope.payment.detailPayment.push({
                id: ltPays[i].id,
                document: ltPays[i].documentNumber,
                year: ltPays[i].year,
                item: ltPays[i].item,
                reference3: ltPays[i].reference3,
                baseDate: ltPays[i].baselineDate,
                sociedad: company,
                receipt: ltPays[i].receipt,
                reference: ltPays[i].reference,
                reference1: ltPays[i].reference1,
                amount: ltPays[i].amount,
                cdFlujo: ltPays[i].cdFlujo,
                exRatePolicy: ltPays[i].exRatePolicy != null ? ltPays[i].exRatePolicy : ""
            });
        }

        var paymentMethod = "";

        common.forEach(
            function(i) {
                paymentMethod += i.code + ",";
            }
        );

        $scope.payment.redirectRequest.paymentMethod = paymentMethod.substring(0, paymentMethod.length - 1);

        pagoExpressService.payment = $scope.payment;
        $scope.changeProgress(3);
    };


    $scope.clean = function() {
        pagoExpressService.query = {};
        pagoExpressService.information = {};
        pagoExpressService.payment = {};
        $scope.changeProgress(1);
    };


    $scope.history = function() {
        $scope.changeProgress('history');
    };


    $scope.tabChanged = function(tab) {
        if (tabSelected != tab) {
            var portfolioTab;
            var valid = false;

            var snTabFinanced = $scope.portfolio.fullData.filter(
                function(i) {
                    return i.selected;
                }
            );

            if (snTabFinanced.length > 0) {
                portfolioTab = "los recibos financiados";
                valid = true;
            } else {

                $scope.ltPortfolios.forEach(
                    function(p, i) {
                        var ltSelected = p.fullData.filter(
                            function(i) {
                                return i.selected;
                            }
                        );

                        if (ltSelected.length > 0) {
                            portfolioTab = p.tab;
                        }

                        valid = ltSelected.length > 0 || valid;
                    }
                );
            }


            if (valid) {
                var span = document.createElement("span");
                span.appendChild(document.createTextNode("El hacerlo cancelará el pago para " + portfolioTab));
                swal({
                        title: "Cancelar Pago",
                        text: "¿Estás seguro que deseas cambiar de pestaña?",
                        icon: "warning",
                        content: span,
                        buttons: {
                            cancel: "Cancelar",

                            accept: {
                                text: "Aceptar",
                                value: true
                            }
                        }
                    })
                    .then(
                        function(answer) {
                            if (answer) {
                                $scope.invalidPartial = false;

                                $scope.ltPortfolios.forEach(
                                    function(p) {
                                        p.fullData.forEach(
                                            function(i) {
                                                return i.selected = false;
                                            }
                                        );
                                    }
                                );

                                $scope.portfolio.fullData.forEach(
                                    function(i) {
                                        return i.selected = false;
                                    }
                                );

                                cleanTabs(tab);
                            }
                            $scope.$apply();
                        }
                    );
            } else {
                cleanTabs(tab);
            }
        }
    };

    goToTop("s4-workspace");
});